name: check jobs output 
on:
  push:
    branches:
    - jobOutput
  pull_request:
    branches:
    - jobOutput
jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step0.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        #old version from July 2023 - didn't work
        #creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.PWD }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.PWD }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Checkout
      uses: actions/checkout@v3
      
    - id: step0
      uses: azure/CLI@v1.0.7
      with:
        inlineScript: |
          az deployment group what-if --resource-group "testRG" --name "asgdeploy" --location westus --template-file "./test/asg.test.bicep" --parameters "./test/asg.test.parameters.json"
          #value="$(az group show --name testRG --output json)"
          #value="${value//'%'/'%25'}"
          #value="${value//$'\n'/'%0A'}"
          #value="${value//$'\r'/'%0D'}"
          #echo "::set-output name=test::$value"
          #test="hello"
          #echo "$value"
          #echo "::set-output name=test::$test"
          #echo "test=$test" >> $GITHUB_ENV
          #echo "test=$value" >> $GITHUB_OUTPUT
          
    - id: step1
      uses: azure/CLI@v1.0.7
      with:
        inlineScript: |
          echo "${{fromjson(steps.step0.outputs.test)}}"
    - id: step2
      uses: azure/CLI@v1.0.7
      with:
        inlinescript: |
          echo "test=$(echo "world")" >> $GITHUB_OUTPUT
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
    - run: echo ${{needs.job1.outputs.output1}}  
    - id: getParams
      name: Print the final result
      shell: bash
      run: |
        echo ${{needs.job1.outputs.output1}} 
        echo "RGName- ${{fromJson(needs.job1.outputs.output1)}}"
        #echo "location- ${{fromJson(needs.job1.outputs.output1).location}}"
        # the following lines are only required for multi line json
        #value="${value//'%'/'%25'}"
        #value="${value//$'\n'/'%0A'}"
        #value="${value//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        #echo "::set-output name=packageJson::$value"
        #echo 'packageJson<<EOF' >> $GITHUB_OUTPUT
        #$value >> $GITHUB_OUTPUT
        #echo 'EOF' >> $GITHUB_OUTPUT
        #echo "packageJson=$value" >> $GITHUB_OUTPUT
        #echo The result is $value
    
